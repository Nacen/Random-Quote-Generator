{"version":3,"sources":["quotes.js","colors.js","components/Quote/Quote.js","App.js","serviceWorker.js","index.js"],"names":["quotes","text","author","colors","Quote","state","Quotes","Math","floor","random","length","color","Colors","fetchQuoteAndColor","newColor","newQuote","Object","objectSpread","_this","setState","document","body","style","backgroundColor","this","react_default","a","createElement","id","className","href","concat","index_es","icon","onClick","Component","App","library","add","faTwitter","components_Quote_Quote","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e6da7ec2.chunk.js","sourcesContent":["const quotes = [\r\n  {\r\n    text:\r\n      \"I love you the more in that I believe you had liked me for my own sake and for nothing else.\",\r\n    author: \"John Keats\"\r\n  },\r\n  {\r\n    text: \"The journey of a thousand miles begins with one step.\",\r\n    author: \"Lao Tzu\"\r\n  },\r\n  {\r\n    text:\r\n      \"There is only one corner of the universe you can be certain of improving, and that's your own self.\",\r\n    author: \"Aldous Huxley\"\r\n  },\r\n  {\r\n    text: \"Honesty is the first chapter in the book of wisdom.\",\r\n    author: \"Thomas Jefferson\"\r\n  },\r\n  {\r\n    text: \"The best preparation for tomorrow is doing your best today.\",\r\n    author: \"H. Jackson Brown, Jr.\"\r\n  },\r\n  {\r\n    text: \"I have not failed. I've just found 10,000 ways that won't work.\",\r\n    author: \"Thomas A. Edison\"\r\n  },\r\n  {\r\n    text:\r\n      \"Tell me and I forget. Teach me and I remember. Involve me and I learn.\",\r\n    author: \"Benjamin Franklin\"\r\n  },\r\n  {\r\n    text: \"The secret of getting ahead is getting started.\",\r\n    author: \"Mark Twain\"\r\n  },\r\n  {\r\n    text: \"Life isn't about finding yourself. Life is about creating yourself.\",\r\n    author: \"George Bernard Shaw\"\r\n  },\r\n  {\r\n    text: \"The only true wisdom is in knowing you know nothing.\",\r\n    author: \"Socrates\"\r\n  }\r\n];\r\nexport default quotes;\r\n","// color schemes i got from https://hookagency.com/website-color-schemes/\r\nconst colors = [\r\n  \"#9068be\",\r\n  \"#e62739\",\r\n  \"#3a4660\",\r\n  \"#c9af98\",\r\n  \"#ed8a63\",\r\n  \"#845007\",\r\n  \"#393f4d\",\r\n  \"#1d1e22\",\r\n  \"#7dce94\",\r\n  \"#3d3d3f\",\r\n  \"#bd8c7d\",\r\n  \"#49494b\",\r\n  \"#fa625f\",\r\n  \"#005995\",\r\n  \"#600473\",\r\n  \"#cd5554\",\r\n  \"#91684a\",\r\n  \"#313d4b\",\r\n  \"#00c07f\",\r\n  \"#b11a21\",\r\n  \"#7A9D96\",\r\n  \"#1e1e20\"\r\n];\r\nexport default colors;\r\n","import React, { Component } from \"react\";\r\nimport \"./Quote.css\";\r\nimport Quotes from \"../../quotes\";\r\nimport Colors from \"../../colors\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\n\r\nclass Quote extends Component {\r\n  state = {\r\n    text: Quotes[Math.floor(Math.random() * Quotes.length)].text,\r\n    author: Quotes[Math.floor(Math.random() * Quotes.length)].author,\r\n    color: Colors[Math.floor(Math.random() * Colors.length)]\r\n  };\r\n\r\n  componentWillMount() {\r\n    document.body.style.backgroundColor = this.state.color;\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    document.body.style.backgroundColor = this.state.color;\r\n  }\r\n\r\n  fetchQuoteAndColor = () => {\r\n    let newColor = Colors[Math.floor(Math.random() * Colors.length)];\r\n    let newQuote = { ...Quotes[Math.floor(Math.random() * Quotes.length)] };\r\n    while (this.state.text === newQuote.text)\r\n      newQuote = Quotes[Math.floor(Math.random() * Quotes.length)];\r\n\r\n    while (this.state.color === newColor)\r\n      newColor = Colors[Math.floor(Math.random() * Colors.length)];\r\n\r\n    this.setState({\r\n      text: newQuote.text,\r\n      author: newQuote.author,\r\n      color: newColor\r\n    });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div id=\"quote-box\">\r\n        <p style={{ color: this.state.color }} id=\"text\">\r\n          {this.state.text}\r\n        </p>\r\n        <p id=\"author\" style={{ color: this.state.color }}>\r\n          - {this.state.author}\r\n        </p>\r\n        <div className=\"buttons\">\r\n          <a\r\n            id=\"tweet-quote\"\r\n            className=\"twitter-share-button\"\r\n            href={`https://twitter.com/intent/tweet?text=${\r\n              this.state.text\r\n            }%20-${this.state.author}&hashtags=quotes`}\r\n          >\r\n            <button\r\n              style={{ backgroundColor: this.state.color }}\r\n              className=\"buttons__social\"\r\n            >\r\n              <FontAwesomeIcon icon={[\"fab\", \"twitter\"]} />\r\n            </button>\r\n          </a>\r\n          <button\r\n            style={{ backgroundColor: this.state.color }}\r\n            onClick={this.fetchQuoteAndColor}\r\n            id=\"new-quote\"\r\n          >\r\n            New quote\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Quote;\r\n","import React, { Component } from \"react\";\nimport Quote from \"./components/Quote/Quote\";\nimport \"./App.css\";\nimport { library } from \"@fortawesome/fontawesome-svg-core\";\nimport { faTwitter } from \"@fortawesome/free-brands-svg-icons\";\n\nclass App extends Component {\n\n  render() {\n    library.add(faTwitter);\n    return (\n      <div>\n        <Quote />\n        <span className=\"creator\">by Nacen</span>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}